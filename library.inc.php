<?php// configuration information -- mostly global variablesrequire_once ('config.inc.php');require_once ('vendor/autoload.php');session_start();if (!isset($_SESSION['user']) && (basename($_SERVER['PHP_SELF']) != 'login.php')) {	header("Location: login.php?redirect={$_SERVER['REQUEST_URI']}");}use PhpRbac\Rbac;$rbac = new Rbac();// open persistent connection to database$GLOBALS['db']['link'] = mysql_pconnect($GLOBALS['db']['host'], $GLOBALS['db']['user'], $GLOBALS['db']['password']) or exit (mysql_error());mysql_select_db($GLOBALS['db']['db'], $GLOBALS['db']['link']);function exit_mysql_error ($sql = "No SQL query stored"){	exit ("<code>$sql</code>" . mysql_error());}function exit_sql_error ($sql){	exit_mysql_erro ($sql);}function RosterYears ($cid, $restrict = true){	$now = getdate();	if ($now["mon"] >= 9)	{		$curr_year = $now["year"] + 1;	}	else	{		$curr_year = $now["year"];	}	$sql = "SELECT r.`year` FROM `roster_memberships` AS m				JOIN `rosters` AS r ON r.`roster_id` = m.`roster_id`				JOIN `groups` AS g ON g.`group_id` = r.`group_id`				WHERE g.`excluded` <> '1' AND r.`year` > '0' AND m.`contact_id` = '$cid' AND r.`year` > 0 " .					($restrict ? "AND r.`year` < '$curr_year'" : "") .				"GROUP BY r.`year`				ORDER BY r.`year` ASC";	$years = mysql_query ($sql) or exit_sql_error ($sql);	if ($step != 3)	{		$prev_year = -1;		$curr_year = NULL;		$result = "";		while ($y = mysql_fetch_assoc ($years))		{			$curr_year = $y["year"][2] . $y["year"][3];			if ($curr_year == ($prev_year + 1))			{				if ((strlen ($result) > 2) && ($result[strlen ($result) - 1] != "-"))				{					$result .= "-";				}			}			else			{				if (($prev_year) && (strlen ($result) > 2) && ($result[strlen ($result) - 1] == "-"))				{					$result .= "'$prev_year";				}				$result = dbAddToList ($result, "'$curr_year");			}			$prev_year = $curr_year;		}		if ((strlen ($result) > 2) && ($result[strlen ($result) - 1] == "-"))		{			$result .= "'$curr_year";		}	}	return $result;}function mail_html ($to, $subject, $html, $headers){	$search = array ('@<script[^>]*?>.*?</script>@si', // Strip out javascript					 '@<[\/\!]*?[^<>]*?>@si',          // Strip out HTML tags					 '@([\r\n])[\s]+@',                // Strip out white space					 '@&(quot|#34);@i',                // Replace HTML entities					 '@&(amp|#38);@i',					 '@&(lt|#60);@i',					 '@&(gt|#62);@i',					 '@&(nbsp|#160);@i',					 '@&(iexcl|#161);@i',					 '@&(cent|#162);@i',					 '@&(pound|#163);@i',					 '@&(copy|#169);@i',					 '@&#(\d+);@e');                    // evaluate as php	$replace = array ('',					 '',					 '\1',					 '"',					 '&',					 '<',					 '>',					 ' ',					 chr(161),					 chr(162),					 chr(163),					 chr(169),					 'chr(\1)');	$text = preg_replace($search, $replace, $html);	$text .= "\n\nThis message was originally formatted with HTML. If your email viewer supports HTML-formatted mail, this message would look nicer that way!\n";	$semi_rand = md5(time());	$mime_boundary = "==Multipart_Boundary_x{$semi_rand}x";	$headers .= "\nContent-Type: multipart/alternative; boundary=\"$mime_boundary\"";	$body = "This is a multi-part MIME email.\n\n--$mime_boundary\nContent-Type: text/plain; charset=\"iso-8859-1\"\nContent-Transfer-Encoding: 7bit\n$text\n--$mime_boundary\nContent-Type: text/html; charset=\"iso-8859-1\"\nContent-Transfer-Encoding: 7bit\n$html";	return mail ($to, $subject, $body, $headers);}function NameSearch ($pattern, $joins = NULL, $conditions = NULL, $order = NULL, $redirect = NULL){	$name_array = NULL;	$i = 0;	while (($j = strpos ($pattern, " ")) !== false)	{		$name_array[$i++] = substr ($pattern, 0, $j);		$pattern = substr ($pattern, $j + 1);	}	$name_array[$i] = $pattern;	$sql = "SELECT * FROM `contacts` AS c LEFT JOIN `titles` AS t ON t.`title_id` = c.`title_id` LEFT JOIN `degrees` AS d ON d.`degree_id` = c.`degree_id` " . ($joins != NULL ? " $joins " : "") . "WHERE 1";	for ($i = 0; $i < sizeof ($name_array); $i++)	{		$n = $name_array[$i];		$sql .= " AND (`first_name` LIKE '$n%' OR `middle_name` LIKE '$n%' OR `primary_name` LIKE '$n%' OR `primary_name` LIKE '%-$n%' OR `primary_name` LIKE '% $n%' OR `nickname` LIKE '$n%')";	}	$sql .= ($conditions != NULL ? " AND ($conditions)" : "") . " ORDER BY " . ($order != NULL ? "$order, " : "") . "`primary_name` ASC, `first_name` ASC";	$result = mysql_query($sql, $GLOBALS['db']['link']) or ($redirect != NULL ? header ("Location: $redirect") : exit (mysql_error()));	return $result;}function InsertArray ($array, $table){	$fields = "";	$values = "";	reset ($array);	while (list ($field, $value) = each ($array))	{		$fields = dbAddToList ($fields, "`$field`");		$values = dbAddToList ($values, ($value === NULL ? "NULL" : "'$value'"));	}	reset ($array);	$sql = "INSERT INTO `$table` ($fields) VALUES ($values)";	$result = mysql_query ($sql) or exit (mysql_error());	return mysql_insert_id();}function DocType(){	echo '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">' . "\n";}function dbAddToList ($list, $item, $separator = ', '){	if (strlen ($list) > 0)	{		return $list . $separator . $item;	}	else return $item;}// returns reformatted timestampfunction TimeStamp ($ts){	if ($GLOBALS['feedback']) echo "TimeStamp($ts)\n";	// no real need for code here, but left in place in case feelings change	/* $year = substr ($ts, 0, 4);	$month = substr ($ts, 4, 2);	$day = substr ($ts, 6, 2);	$hour = substr ($ts, 8, 2);	$minute = substr ($ts, 10, 2);	$second = substr ($ts, 12, 2);	return "$month/$day/$year at $hour:$minute:$second"; */	return $ts;}// returns age with required speficity since sql-formatted datefunction Age ($date, $year = true, $month = false, $day = false){	$byear = substr ($date, 0, 4);	$bmonth = substr ($date, 5, 2);	$bday = substr ($date, 7, 2);	$today = getdate();	$tyear = $today['year'];	$tmonth = $today['mon'];	$tday = $today['mday'];	$years = $tyear - $byear + ($bmonth > $tmonth ? -1 : 0);	$months = $tmonth - $bmonth;	if ($months < 0) $months += 12;	$days = $tday - $bday;	if ($days < 0) $months += 31;	if ($year) $result = $years . ' years';	else $months += 12 * $years;	if ($month) $result .= ' ' . $months . ' months';	else $days += $months * 31;	if ($day) $result .= ' ' . $days . ' days';	return $result;}// returns name for specified contact in specified format (see below for format variables)function Name ($cid, $format = "%F %M %L %D", $row_name = NULL){	if ($GLOBALS['feedback']) echo "Name($cid,$format)\n";	// correct any lingering occurrences of mal-formatted names	if (strpos ($format, "%M \"%N\""))	{		$format = str_replace ("%M \"%N\"", "\"%N\" %M", $format);	}	// a hack to match format codes at the start of the string	$format = ' ' . $format;	if (! $row_name)	{		$sql = "SELECT * FROM contacts AS c LEFT JOIN titles AS t ON c.title_id = t.title_id LEFT JOIN degrees AS d ON c.degree_id = d.degree_id WHERE contact_id = $cid";		$name = mysql_query ($sql) or exit_mysql_error($sql);		$row_name = mysql_fetch_assoc ($name);		mysql_free_result ($name);		// if the nickname is the same as the middle name, and both are		// requested, ignore the nickname		if ($row_name["nickname"] == $row_name["middle_name"])		{			$format = str_replace ("\"%N\" %M", "%M", $format);		}	}	$formats = array('%F' => 'first_name',					 '%M' => 'middle_name',					 '%m' => 'middle_name', // only middle initial					 '%L' => 'primary_name',					 '%N' => 'nickname',					 '%T' => 'title',					 '%D' => 'degree',					 // choose the nickname if it exists, otherwise first name					 '%n' => ($row_name['nickname'] != '' ? 'nickname' : 'first_name'));	// loop through the format string and construct the name	while (list ($code, $field) = each ($formats))	{		// use an easy-to-type local variable		$data = $row_name[$field];		// make initials pretty;		if (($code == "%m") && (strlen ($data) > 0))		{			$data = $data[0];		}		if (strlen ($data) == 1)		{			$data .= '.';		}		// replace all instances of this formatting code with the data		while ($pos = strpos ($format, $code))		{			$format = substr_replace ($format, $data, $pos, strlen($code));		}	}	// remove extraneous quotes	$format = str_replace ("\"\" ", "", $format);	// remove extra spaces	$format = str_replace ("  ", " ", $format);	$format = str_replace (" ,", ",", $format);	return trim($format);}function DisplayAddress ($row){	echo $row['street_address_1'] . '<br>';	if (strlen ($row['street_address_2']))		echo $row['street_address_2'] . '<br>';	echo $row['city'] . ', ' . $row['state'] . ' ' . $row['postal_code'];	if ($row['country'] != 'United States')		echo '<br>' . $row['country'];	if (isset ($row['show_custom']))	{		if ($row['show_custom'])		{			echo '<br><i>' . $row['custom_caption'] . ': ' . $row['custom'] . '</i>';		}	}}function DisplayPhone ($row){	echo ($row['formatted'] ? $row['number'] : dbPhone($row['number']));}function DisplayEmail ($row){	echo "<a href=\"mailto:" . Name ($row["contact_id"], "%n %L") . " &lt;" . $row["email"] . "&gt;\">" . $row["email"] . "</a>";}function DisplayDonation ($row){	echo '<th>' . $row['date'] . '</th>';	echo '<td>' . $row['amount'] . '<td>';}function DisplayURL ($row){	echo "<script><!--			ShortLink (\"" . $row["url"] . "\", \"new_window\");			//--></script>";}function DisplayGroup ($row){	echo "<td>" . ($row["role"] ? $row["role"] . ", " : "") . "<a target=\"content\" href=\"../groups/roster.php?id=" . $row["roster_id"] . "\">" . ($row["year"] > 0 ? $row["year"] : "Recurring") . " " . $row["group"] . "</a></td>";}$phpass = new PasswordHash(12, false);function HashPassword($p) {	global $phpass;	return $phpass->HashPassword($p);	//return password_hash($p, PASSWORD_DEFAULT);}/* this method is "misnamed" because, when included in the Gulch web site, components/library.php:Phones() supercedes it */function dbPhone ($p){	$format = '(' . substr ($p, 0, 3) . ') ' . substr($p, 3, 3) . '-' . substr ($p, 6, 4) . (strlen ($p) > 10 ? ' x' . substr ($p, 10) : '');	return trim($format);}function StripPhone ($p){	$format = $p;	$i = 0;	while ($i < strlen ($format))	{		$c = substr ($format, $i, 1);		if (strcspn($c, '0123456789'))			$format = substr ($format, 0, $i) . substr ($format, $i + 1);		else			$i++;	}	return ($format);}function URL ($u){	$format = $u;	if (strpos ($format, 'http://') === false) return 'http://' . $format;	else return $format;}function StripURL ($u){	$format = $u;	if (strpos ($format, 'http://') === false) return $format;	else return substr ($format, 7);}function SimpleSummary ($cid){	$phones_query = "SELECT p.*, pt.*, c.*					 FROM phones AS p					 JOIN phone_associations AS pa ON pa.phone_id = p.phone_id					 JOIN contacts AS c ON c.contact_id = pa.contact_id					 JOIN phone_types AS pt ON pt.phone_type_id = p.phone_type_id					 WHERE c.contact_id = $cid					 ORDER BY pt.rank ASC";	$phones = mysql_query ($phones_query, $GLOBALS["db"]["link"]) or exit (mysql_error());	$emails_query = "SELECT e.*, et.*, c.*					 FROM emails AS e					 JOIN email_associations AS ea ON ea.email_id = e.email_id					 JOIN contacts AS c ON c.contact_id = ea.contact_id					 JOIN email_types AS et ON et.email_type_id = e.email_type_id					 WHERE c.contact_id = $cid					 ORDER BY et.rank ASC";	$emails = mysql_query ($emails_query, $GLOBALS["db"]["link"]) or exit (mysql_error());	$addresses_query = "SELECT a.*, at.*, c.*						FROM addresses AS a						JOIN address_associations AS aa ON a.address_id = aa.address_id						JOIN contacts AS c ON c.contact_id = aa.contact_id						JOIN address_types AS at ON at.address_type_id = a.address_type_id						WHERE c.contact_id = $cid						ORDER BY at.rank ASC";	$addresses = mysql_query ($addresses_query, $GLOBALS["db"]["link"]) or exit (mysql_error());	$html = Name ($cid, "<h3>%T %F \"%N\" %M %L %D</h3>\n");	$html .= "<dl>\n";	if (mysql_num_rows($phones) > 0)	{		$html .= "\t<dt>Phones</dt>\n\t\t<dd><table>\n";		while ($row = mysql_fetch_assoc ($phones))		{			$html .= "<tr><th>{$row["phone_type"]}</th> ";			$html .= "<td>" . ($row["formatted"] ? $row["number"] : Phone($row["number"])) . "</td></tr>\n";		}		$html .= "</table></dd>\n";	}	if (mysql_num_rows($emails) > 0)	{		$html .= "\t<dt>Emails</dt>\n\t\t<dd><table>\n";		while ($row = mysql_fetch_assoc ($emails))		{			$html .= "<tr><th>{$row["email_type"]}</th> ";			$html .= "<td>{$row["email"]}</td></tr>\n";		}		$html .= "</table></dd>\n";	}	if (mysql_num_rows($addresses) > 0)	{		$html .= "\t<dt>Addresses</dt>\n\t\t<dd><table>\n";		while ($row = mysql_fetch_assoc ($addresses))		{			$html .= "<tr><th>{$row["address_type"]}</th> ";			$html .= "<td>{$row["street_address_1"]}<br>\n";			if (strlen ($row['street_address_2']))				$html .= $row['street_address_2'] . "<br>\n";			$html .= $row["city"] . ', ' . $row['state'] . ' ' . $row['postal_code'];			if ($row['country'] != 'United States')				$html .= "<br>\n" . $row['country'];			if (isset ($row['show_custom']))			{				if ($row['show_custom'])				{					$html .= "<br>\n<i>{$row["custom_caption"]}: {$row["custom"]}</i>";				}			}			echo "</td></tr>\n";		}		$html .= "</table></dd>\n";	}	$html .= "</dl>\n";	return $html;}// returns nicely formatted SQL queryfunction SQLFormat ($query){	$lowercase = array ('select ', ' max', ' min', ' count', ' avg', ' sum',						'from ', ' as ',						'join ', "left \nJOIN ", "right \nJOIN ", "inner \nJOIN ", "outer \nJOIN ", ' on ',						'where ', ' like ', ' and ', ' or ',						'group by ',						'order by ', ' asc', ' desc', 'ASC, ', 'DESC, ',						'limit ',						"\n\n");	$uppercase = array ('SELECT ', ' MAX', ' MIN', ' COUNT', ' AVG', ' SUM',						"\nFROM ", ' AS ',						"\nJOIN ", "\nLEFT JOIN ", "\nRIGHT JOIN ", "\nINNER JOIN", "OUTER JOIN", "\n\tON ",						"\nWHERE ", ' LIKE ', ' AND ', ' OR  ',						"\nGROUP BY ",						"\nORDER BY\n\t", ' ASC', ' DESC', "ASC,\n\t", "DESC,\n\t",						"\nLIMIT ",						"\n");	return str_replace ($lowercase, $uppercase, $query);;}// returns the current timestamp from the databasefunction DEPCRECATED_Now(){	if ($GLOBALS['feedback']) echo "Deprecated_Now()\n";	mysql_select_db ($GLOBALS['db']['db'], $GLOBALS['db']['link']);	$now = mysql_query("SELECT CURRENT_TIMESTAMP as ts", $GLOBALS['db']['link']) or exit (mysql_error());	$row_now = mysql_fetch_assoc($now);	mysql_free_result ($now);	return $row_now['ts'];}// generates stripes for alternate table rowsfunction Stripe (&$row_counter){	if ($GLOBALS['feedback']) echo "Stripe($row_counter)\n";	$row_counter++;	if ($row_counter % 2 == 0)		echo ' class="stripe" ';}// generates a null option in a select input  if the field is nullfunction OptionNull ($field){	if ($GLOBALS['feedback']) echo "OptionNull($field)\n";	echo '<option value=""';	if (! $field) echo '  selected';	echo '>&nbsp;</option>';}// insert the vars into the table and return the id of the inserted record (id name specified by identifier)function Insert ($vars, $table, $identifier, $special_case){	if ($GLOBALS['feedback']) echo "Insert($vars,$table,$identifier)\n";	if (sizeof ($vars) > 0)	{		$fields = '';		$values = '';		$select = '';		while (list ($key, $value) = each ($vars))		{			switch ($key)			{				case 'button': break;				default:					if (strlen($value))					{						if ($special_case && isset($special_case[$key]))							$value = $special_case[$key]['function'] ($value);						if (strlen ($fields)) $fields .= ', ';						$fields .= "`$key`";						if (strlen ($values)) $values .= ', ';						$values .= "'$value'";						if (strlen ($select)) $select .= ' AND ';						$select .= "`$key` = '$value'";					}					break;			}		}		// this is lame, but it allows us to select the inserted record with significant confidence (how many duplicates can there be with the same timestamp?)		$now = DEPCRECATED_Now();		$fields .= ', `modified`';		$values .= ", '$now'";		$select .= " AND `modified` = '$now'";		mysql_select_db ($GLOBALS['db']['db'], $GLOBALS['db']['link']);		$query_insert = "INSERT INTO `$table` ($fields) VALUES ($values)";		mysql_query ($query_insert, $GLOBALS['db']['link']) or exit (mysql_error());		$query_select = "SELECT * FROM `$table` WHERE $select";		$new_record = mysql_query ($query_select, $GLOBALS['db']['link']) or exit (mysql_error());		$record = mysql_fetch_assoc ($new_record);		return $record[$identifier];	}	else return NULL;}// associate the specified contact with the specified record (id) in the specified association tablefunction Associate ($association_table, $identifier, $cid, $id){	if ($GLOBALS['feedback']) echo "Associate($association_table,$identifier,$cid,$id)\n";	mysql_select_db ($GLOBALS['db']['db'], $GLOBALS['db']['link']);	$query_associate = "INSERT INTO `$association_table` (`contact_id`, `$identifier`) VALUES ('$cid', '$id')";	mysql_query ($query_associate, $GLOBALS['db']['link']) or exit (mysql_error());}// update the specified record with the specified variables in the specified table, returns true iff successfulfunction Update ($vars, $table, $identifier, $special_case){	if ($GLOBALS['feedback']) echo "Update($vars,$table,$identifier)\n";	if (sizeof ($vars) > 0)	{		$update = '';		$id = NULL;		while (list ($key, $value) = each ($vars))		{			switch ($key)			{				case 'button': break;				case $identifier: $id = $value; break;				case 'username':				case 'password':					/* special, special case -- we don't want to accidentally hash an empty password field and reset someone's password! */					if (strlen($value)) {						$value = $special_case[$key]['function']($value);						if (strlen($update)) $update .= ', ';						$update .= "`$key` = '$value'";					}					break;				default:					if ($special_case && isset($special_case[$key]))						$value = $special_case[$key]['function']($value);					if (strlen($update)) $update .= ', ';					$update .= "`$key` = '$value'";					break;			}		}		if (!$id)		{			exit ("<strong>$identifier</strong> not specified. Unable to determine which record to update");			return false;		}		$update .= ", `modified` = '" . DEPCRECATED_Now() . "'";		mysql_select_db($GLOBALS['db']['db'], $GLOBALS['db']['link']);		$query_update = "UPDATE `$table` SET $update WHERE `$identifier` ='$id' LIMIT 1";		mysql_query ($query_update, $GLOBALS['db']['link']) or exit (mysql_error());		return true;	}	else return false;}// delete the specified (select WHERE clause) from the specified tablefunction Delete ($table, $select){	if ($GLOBALS['feedback']) echo "Delete($table,$select)\n";	mysql_select_db ($GLOBALS['db']['db'], $GLOBALS['db']['link']);	$query_delete = "DELETE FROM `$table` WHERE $select";	mysql_query ($query_delete, $GLOBALS['db']['link']) or exit (mysql_error());}// check to see how to handle the current record information, return true if working with a pre-existing record (should auto-fill fields)function RecordUpdate ($page, $table, $identifier, $tag, $assoc_table = NULL, $special_case = NULL){	if ($GLOBALS['feedback']) echo "RecordUpdate ($page,$table,$identifier,$tag,$assoc_table)\n";	$rec = (isset ($_GET['rec']) ? $_GET['rec'] : NULL);	switch ($rec)	{		case 'insert':			$id = Insert ($_POST, $table, $identifier, $special_case);			if ($assoc_table)				Associate ($assoc_table, $identifier, $_GET['cid'], $id);			header("Location: $page?" . ($tag != 'cid' ? 'cid=' . $_GET['cid'] . '&' : '') . "$tag=$id&rec=view");			exit;		case 'update':			Update ($_POST, $table, $identifier, $special_case) or exit ('<strong>Update failed:</strong> failure occurred for unknown reasons. [library.inc.php]');			header("Location: $page?" . ($tag != 'cid' ? 'cid=' . $_GET['cid'] . '&' : '') . "$tag=" . $_GET[$tag] . '&rec=view');			exit;		case 'delete':			if ($assoc_table)				Delete 	($assoc_table, "`contact_id` = '" . $_GET['cid'] . "' AND `$identifier` = '" . $_GET[$tag] . "'");			else				Delete ($table, "`$identifier` = '" . $_GET[$tag] . "'");			header ("Location: $page" . ($tag != 'cid' ? '?cid=' . $_GET['cid'] : ''));			exit;		case 'create':			return false;			break;		case 'view':		case 'revert':		case 'edit':		default:			return true;			break;	}}?>